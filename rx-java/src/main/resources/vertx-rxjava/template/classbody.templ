	@if{concrete}
	  public static final io.vertx.lang.rxjava.TypeArg<@{type.simpleName}> __TYPE_ARG = new io.vertx.lang.rxjava.TypeArg<>(\n
	    obj -> new @{type.simpleName}((@{type.name}) obj),\n
	    @{type.simpleName}::getDelegate\n
	  );\n
	\n
	@end{}
	  private final @{helper.getNonGenericType(ifaceFQCN)} delegate;\n
	@foreach{typeParam:type.params}
	  public final io.vertx.lang.rxjava.TypeArg<@{typeParam.name}> __typeArg_@{typeParam.index};\n
	@end{}
	  \n
	  public @{constructor}(@{helper.getNonGenericType(ifaceFQCN)} delegate) {\n
	@if{concrete && concreteSuperType != null}
	    super(delegate);\n
	@end{}
	    this.delegate = delegate;\n
	@foreach{typeParam:type.params}
	    this.__typeArg_@{typeParam.index} = io.vertx.lang.rxjava.TypeArg.unknown();\n
	@end{}
	  }\n\n
	@if{type.params.size() > 0}
	  public @{constructor}(@{helper.getNonGenericType(ifaceFQCN)} delegate@foreach{typeParam:type.params}
		, io.vertx.lang.rxjava.TypeArg<@{typeParam.name}> typeArg_@{typeParam.index}
		@end{}) {\n
	@if{concrete && concreteSuperType != null}
	    super(delegate);\n
	@end{}
	    this.delegate = delegate;\n
	@foreach{typeParam:type.params}
	    this.__typeArg_@{typeParam.index} = typeArg_@{typeParam.index};\n
	@end{}
	  }\n\n
	@end{}

	  public @{type.name} getDelegate() {\n
	    return delegate;\n
	  }\n\n

	@if{type.raw.readStream}
		@includeNamed{'genToObservable'}
	@end{}

	@foreach{method:methods}
		@includeNamed{'foobar';method=method}
	@end{}

	@foreach{cacheDecl:cacheDecls}
	  @{cacheDecl};\n
	@end{}
