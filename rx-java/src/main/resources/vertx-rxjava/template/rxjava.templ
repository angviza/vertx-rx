
@code{
  def genFutureMethodName(method) {
    return 'rx' + java.lang.Character.toUpperCase(method.name.charAt(0)) + method.name.substring(1);
  }

  def genFutureMethod(method) {
    var futMethodName = genFutureMethodName(method);
    var futParams = new java.util.ArrayList();
    var count = 0;
    var size = method.params.size() - 1;
    while (count < size) {
      var param = method.params[count];
      /* Transform ReadStream -> Observable */
      futParams.add(param);
      count = count + 1;
    }
    var futParam = method.params[size];
    var futType = futParam.type.args[0].args[0];
    var futReturnType = new io.vertx.codegen.type.ParameterizedTypeInfo(io.vertx.codegen.type.TypeReflectionFactory.create(rx.Single), false, java.util.Collections.singletonList(futType));
    var futMethod = new io.vertx.codegen.MethodInfo(
      method.ownerTypes, futMethodName,
      method.kind,
      futReturnType,
      null,
      method.fluent,
      method.cacheReturn,
      futParams,
      method.comment,
      method.doc,
      method.staticMethod,
      method.defaultMethod,
      method.typeParams);
    return futMethod;
  }

  def genOverloadedMethod(method) {
    var params = null;
    var count = 0;
    for (param : method.params) {
      if (param.type.parameterized && param.type.raw.name == 'io.vertx.core.streams.ReadStream') {
        if (params == null) {
          params = new java.util.ArrayList(method.params);
        }
        var paramType = new io.vertx.codegen.type.ParameterizedTypeInfo(
          io.vertx.codegen.type.TypeReflectionFactory.create(rx.Observable),
          false,
          java.util.Collections.singletonList(param.type.args[0])
        );
        params[count] = new io.vertx.codegen.ParamInfo(
          param.index,
          param.name,
          param.description,
          paramType
        );
      }
      count = count + 1;
    }
    if (params != null) {
      return new io.vertx.codegen.MethodInfo(
        method.ownerTypes,
        method.name,
        method.kind,
        method.returnType,
        null,
        method.fluent,
        method.cacheReturn,
        params,
        method.comment,
        method.doc,
        method.staticMethod,
        method.defaultMethod,
        method.typeParams);
    }
    return null;
  }
}

@declare{'genReadStream'}
  rx.Observable<@{typeParams[0].name}> toObservable();\n\n
@end{}

@declare{'genToObservable'}
	@code{streamType=type.raw.readStreamArg}
  private rx.Observable<@{streamType.simpleName}> observable;\n\n
  public synchronized rx.Observable<@{streamType.simpleName}> toObservable() {\n
    if (observable == null) {\n
	@if{streamType.kind == CLASS_API}
      java.util.function.Function<@{streamType.raw.name}, @{streamType.simpleName}> conv = @{streamType.raw.simpleName}::newInstance;\n
      observable = io.vertx.rx.java.RxHelper.toObservable(delegate, conv);\n
	@else{streamType.variable}
      java.util.function.Function<Object, @{streamType.simpleName}> conv = (java.util.function.Function<Object, @{streamType.simpleName}>) __typeArg_0.wrap;\n
      observable = io.vertx.rx.java.RxHelper.toObservable(delegate, conv);\n
	@else{}
      observable = io.vertx.rx.java.RxHelper.toObservable(this.getDelegate());\n
	@end{}
    }\n
    return observable;\n
  }\n\n
@end{}

@declare{'genRxMethod'}
	@if{options.get('codegen.' + rxid + '.deprecated') == 'true'}
		@code{methodName=method.name}
		@code{futureParams=new java.util.ArrayList(method.params)}
		@code{futureParam=futureParams.remove(futureParams.size()-1)}
		@code{futureType=futureParam.type.args[0].args[0]}
		@code{futureReturnType=new io.vertx.codegen.type.ParameterizedTypeInfo(io.vertx.codegen.type.TypeReflectionFactory.create(rx.Observable), false, java.util.Collections.singletonList(futureType))}
		@code{futureMethod=new io.vertx.codegen.MethodInfo(method.ownerTypes,method.name + 'Observable',method.kind,futureReturnType,null,method.fluent,method.cacheReturn,futureParams,method.comment,method.doc,method.staticMethod,method.defaultMethod,method.typeParams)}
		@includeNamed{'startMethodTemplate';meth=futureMethod;deprecated='use {@link #' + genFutureMethodName(method) + '} instead'} { \n
		    io.vertx.rx.java.ObservableFuture<@{futureType.simpleName}> @{futureParam.name} = io.vertx.rx.java.RxHelper.observableFuture();\n
		    @{methodName}(@foreach{param:futureParams}@{param.name}@end{', '}@if{futureParams.size() > 0}, @end{}@{futureParam.name}.toHandler());\n
		    return @{futureParam.name};\n
		  }\n\n
	@end{}
		@code{futMeth = genFutureMethod(method)}
		@includeNamed{'startMethodTemplate';meth=futMeth;deprecated=''} { \n
		    return Single.create(new io.vertx.rx.java.SingleOnSubscribeAdapter<>(fut -> {\n
		      @{method.name}(@foreach{param:futMeth.params}@{param.name}@end{', '}@if{futMeth.params.size() > 0}, @end{}fut);\n
		    }));\n
		  }\n\n
@end{}

@declare{'genRxImports'}
import rx.Observable;\n
import rx.Single;\n
@end{}

@declare{'foobar'}
	@includeNamed{'genMethod'}
	@code{overloaded = genOverloadedMethod(method)}
	@if{overloaded != null}
		@includeNamed{'genMethod';method=overloaded}
	@end{}
@end{}

@includeNamed{'class.templ';rxid='rxjava';rxpkg='rx'}
