@includeNamed{'common.templ'}

/*\n
 * Copyright 2014 Red Hat, Inc.\n
 *\n
 * Red Hat licenses this file to you under the Apache License, version 2.0\n
 * (the "License"); you may not use this file except in compliance with the\n
 * License.  You may obtain a copy of the License at:\n
 *\n
 * http://www.apache.org/licenses/LICENSE-2.0\n
 *\n
 * Unless required by applicable law or agreed to in writing, software\n
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT\n
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n
 * License for the specific language governing permissions and limitations\n
 * under the License.\n
 */\n\n

package @{type.raw.translatePackageName(rxid)};\n\n

@comment{'the current index of the cache'}
@code{cacheDecls=new java.util.ArrayList()}

import java.util.Map;\n
@includeNamed{'genRxImports'}
@comment{"Generate the imports"}
@foreach{importedType:importedTypes}
	@if{importedType.kind == CLASS_API}
		@if{!ifacePackageName.equals(importedType.packageName)}
			import @{importedType.raw.translateName(rxid)};\n
		@end{}
	@else{}
		@if{!importedType.packageName.equals("java.lang")}
			import @{importedType};\n
		@end{}
	@end{}
@end{}

\n
@if{doc != null}
/**\n
@{renderDocToHtml(" *", doc, renderLinkToHtml)}
 *\n
 * <p/>\n
 * NOTE: This class has been automatically generated from the {@link @{type.name} original} non RX-ified interface using Vert.x codegen.\n
 */\n
@end{}
\n
@io.vertx.lang.@{rxid}.RxGen(@{type.name}.class)\n
public @if{concrete}class@else{}interface@end{} @{helper.getSimpleName(ifaceFQCN)}

@if{type.name == 'io.vertx.core.buffer.Buffer'}
	 implements io.vertx.core.shareddata.impl.ClusterSerializable
@end{}

@if{concrete}
	@if{concreteSuperType != null}
	 extends @{concreteSuperType.simpleName}
	@end{}
@end{}

@if{abstractSuperTypes.size() > 0}
	 @if{concrete}implements@else{}extends@end{}
	@foreach{abstractSuperType: abstractSuperTypes}
	 @{abstractSuperType.simpleName}
	@end{', '}
@end{}

@if{handlerType != null}
	@if{abstractSuperTypes.empty}
		 @if{concrete}implements @else{}extends @end{}
	@else{}, @end{}
	io.vertx.core.Handler<@{handlerType.simpleName}>
@end{} {\n\n

@if{concrete}

	@if{type.name == 'io.vertx.core.buffer.Buffer'}
	    public void writeToBuffer(io.vertx.core.buffer.Buffer buffer) {\n
	      delegate.writeToBuffer(buffer);\n
	    }\n
	\n
	    public int readFromBuffer(int pos, io.vertx.core.buffer.Buffer buffer) {\n
	      return delegate.readFromBuffer(pos, buffer);\n
	    }\n
	\n
	@end{}

	@includeNamed{'classbody.templ';constructor=ifaceSimpleName}

@else{}

	  @{type.name} getDelegate();\n\n

	@foreach{method:methods}
		@includeNamed{'startMethodTemplate';deprecated='';meth=method};\n\n
	@end{}

	@if{type.raw.name == 'io.vertx.core.streams.ReadStream'}
		@includeNamed{'genReadStream'}
	@end{}

@end{}
\n
  public static @{genOptTypeParamsDecl(type, ' ')}@{type.simpleName}@{genOptTypeParamsDecl(type, '')} newInstance(@{type.raw.name} arg) {\n
    return arg != null ? new @{type.raw.simpleName + (concrete ? '' : 'Impl')}@{genOptTypeParamsDecl(type, '')}(arg) : null;\n
  }\n
@if{type.params.size() > 0}
\n
  public static @{genOptTypeParamsDecl(type, ' ')}@{type.simpleName}@{genOptTypeParamsDecl(type, '')} newInstance(@{type.raw.name} arg@foreach{typeParam:type.params}
, io.vertx.lang.@{rxid}.TypeArg<@{typeParam.name}> __typeArg_@{typeParam.name}
@end{}) {\n
    return arg != null ? new @{type.raw.simpleName + (concrete ? '' : 'Impl')}@{genOptTypeParamsDecl(type, '')}(arg@foreach{typeParam:typeParams}
, __typeArg_@{typeParam.name}
@end{}) : null;\n
  }\n
@end{}
}\n

@if{!concrete}

\n
class @{type.raw.simpleName}Impl@{genOptTypeParamsDecl(type, '')} implements @{helper.getSimpleName(ifaceFQCN)} {\n
@includeNamed{'classbody.templ';constructor=(type.raw.simpleName + 'Impl')}
}\n

@end{}
